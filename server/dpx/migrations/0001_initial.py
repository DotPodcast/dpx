# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-03-15 17:19
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accounts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remote_id', models.CharField(blank=True, db_index=True, max_length=512, null=True, verbose_name='remote ID')),
                ('slug', models.CharField(editable=False, max_length=100)),
                ('title', models.CharField(max_length=500)),
                ('subtitle', models.TextField(blank=True, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('remote_artwork', models.URLField(blank=True, max_length=512, null=True)),
                ('banner_image', models.URLField(blank=True, max_length=512, null=True)),
                ('date_published', models.DateTimeField()),
                ('date_modified', models.DateTimeField(auto_now=True, null=True)),
                ('audio_mimetype', models.CharField(blank=True, max_length=50, null=True)),
                ('audio_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('audio_filesize', models.PositiveIntegerField(blank=True, null=True)),
                ('video_mimetype', models.CharField(blank=True, max_length=50, null=True)),
                ('video_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('video_filesize', models.PositiveIntegerField(blank=True, null=True)),
                ('remote_audio_enclosure', models.URLField(blank=True, max_length=512, null=True)),
                ('remote_video_enclosure', models.URLField(blank=True, max_length=512, null=True)),
                ('number', models.PositiveIntegerField(default=0)),
            ],
            options={
                'get_latest_by': 'date_published',
                'ordering': ('-date_published',),
            },
        ),
        migrations.CreateModel(
            name='EpisodeGuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField()),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpx.Episode')),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='EpisodeHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField()),
                ('episode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpx.Episode')),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=36)),
                ('name', models.CharField(max_length=100)),
                ('url', models.URLField(blank=True, max_length=512, null=True, verbose_name='URL')),
                ('public_key', models.CharField(blank=True, db_index=True, max_length=500, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('slug', models.CharField(editable=False, max_length=100, unique=True)),
                ('remote_feed', models.URLField(blank=True, db_index=True, max_length=512, null=True)),
                ('subtitle', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('remote_artwork', models.URLField(blank=True, max_length=512, null=True)),
                ('banner_image', models.URLField(blank=True, max_length=512, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcasts', to='dpx.Account')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PodcastHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveIntegerField()),
                ('podcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dpx.Podcast')),
            ],
            options={
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('url', models.URLField(blank=True, max_length=512, null=True, verbose_name='URL')),
                ('logo', models.URLField(blank=True, max_length=512, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publishers', to='dpx.Account')),
                ('admins', models.ManyToManyField(related_name='publishers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('number', models.PositiveIntegerField()),
                ('podcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='dpx.Podcast')),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Taxonomy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('url', models.URLField(max_length=512, unique=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, null=True)),
                ('required', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('url', models.URLField(max_length=512, unique=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, null=True)),
                ('taxonomy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='dpx.Taxonomy')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TokenPair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_token', models.CharField(max_length=64, unique=True)),
                ('secret_token', models.CharField(max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(choices=[('bch', 'Bitcoin Cash'), ('btc', 'Bitcoin'), ('eth', 'Ethereum'), ('ltc', 'Litecoin'), ('xrp', 'Ripple'), ('zec', 'Zcash')], max_length=30)),
                ('address', models.CharField(max_length=128)),
                ('podcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to='dpx.Podcast')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dpx.Person')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('dpx.person',),
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('person_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dpx.Person')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='host', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('dpx.person',),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('tokenpair_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dpx.TokenPair')),
                ('app_name', models.CharField(blank=True, max_length=100, null=True)),
                ('app_url', models.URLField(max_length=512, verbose_name='app URL')),
                ('app_logo', models.URLField(blank=True, max_length=512, null=True)),
                ('last_fetched', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-last_fetched',),
            },
            bases=('dpx.tokenpair',),
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('tokenpair_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dpx.TokenPair')),
                ('app_name', models.CharField(blank=True, max_length=100, null=True)),
                ('app_url', models.URLField(blank=True, max_length=512, null=True, verbose_name='app URL')),
                ('app_logo', models.URLField(blank=True, max_length=512, null=True)),
                ('kind', models.CharField(choices=[('c', 'casual listener'), ('s', 'subscriber')], max_length=1)),
                ('source_token', models.CharField(max_length=255)),
                ('date_subscribed', models.DateTimeField(auto_now_add=True)),
                ('last_fetched', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-last_fetched', '-date_subscribed'),
            },
            bases=('dpx.tokenpair',),
        ),
        migrations.AddField(
            model_name='podcast',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcasts', to='dpx.Publisher'),
        ),
        migrations.AddField(
            model_name='podcast',
            name='taxonomy_terms',
            field=models.ManyToManyField(related_name='podcasts', to='dpx.Term'),
        ),
        migrations.AddField(
            model_name='person',
            name='account',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people', to='dpx.Account'),
        ),
        migrations.AddField(
            model_name='episodeguest',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guesting_episodes', to='dpx.Person'),
        ),
        migrations.AddField(
            model_name='episode',
            name='podcast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='dpx.Podcast'),
        ),
        migrations.AddField(
            model_name='episode',
            name='season',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='episodes', to='dpx.Season'),
        ),
        migrations.AddField(
            model_name='episode',
            name='taxonomy_terms',
            field=models.ManyToManyField(related_name='episodes', to='dpx.Term'),
        ),
        migrations.AlterUniqueTogether(
            name='wallet',
            unique_together=set([('symbol', 'podcast')]),
        ),
        migrations.AddField(
            model_name='subscriber',
            name='podcast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='dpx.Podcast'),
        ),
        migrations.AddField(
            model_name='podcasthost',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcasts', to='dpx.Host'),
        ),
        migrations.AddField(
            model_name='podcast',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='podcasts', to='dpx.Author'),
        ),
        migrations.AddField(
            model_name='podcast',
            name='hosts',
            field=models.ManyToManyField(through='dpx.PodcastHost', to='dpx.Host'),
        ),
        migrations.AddField(
            model_name='player',
            name='podcast',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='dpx.Podcast'),
        ),
        migrations.AlterUniqueTogether(
            name='person',
            unique_together=set([('slug', 'account')]),
        ),
        migrations.AddField(
            model_name='episodehost',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_episodes', to='dpx.Host'),
        ),
        migrations.AlterUniqueTogether(
            name='episodeguest',
            unique_together=set([('person', 'episode')]),
        ),
        migrations.AddField(
            model_name='episode',
            name='hosts',
            field=models.ManyToManyField(through='dpx.EpisodeHost', to='dpx.Host'),
        ),
        migrations.AlterUniqueTogether(
            name='subscriber',
            unique_together=set([('source_token', 'podcast')]),
        ),
        migrations.AlterUniqueTogether(
            name='podcasthost',
            unique_together=set([('host', 'podcast')]),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together=set([('app_url', 'podcast')]),
        ),
        migrations.AlterUniqueTogether(
            name='episodehost',
            unique_together=set([('host', 'episode')]),
        ),
        migrations.AlterUniqueTogether(
            name='episode',
            unique_together=set([('slug', 'podcast')]),
        ),
    ]
